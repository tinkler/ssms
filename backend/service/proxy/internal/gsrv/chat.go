// Code generated by github.com/tinkler/mqttadmin; DO NOT EDIT.
package gsrv
import (
	"context"
	mrz "github.com/tinkler/mqttadmin/mrz/v1"
	"github.com/tinkler/ssms/backend/service/proxy/pkg/model/chat"
	pb_chat_v1 "github.com/tinkler/ssms/backend/service/proxy/chat/v1"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	"github.com/tinkler/mqttadmin/pkg/gs"
	"github.com/tinkler/mqttadmin/pkg/jsonz/sjson"
)


type chatGsrv struct {
	pb_chat_v1.UnimplementedChatGsrvServer
}

func NewChatGsrv() *chatGsrv {
	return &chatGsrv{}
}


func (u *chatGsrv) ChatEnquire(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_chat_v1.Chat, *structpb.Struct](in)
	m := mrz.GetData[*chat.Chat](gm)
	res := mrz.NewTypedRes[*pb_chat_v1.Chat, *structpb.Value]()
	var resData string
	resData, err = m.Enquire(ctx, mrz.GetArgs[string](gm,"question"), )
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResResp(res, resData)
	return res.ToAny(), nil
}
type ChatChatEnquireStreamStream struct {
	stream pb_chat_v1.ChatGsrv_ChatEnquireStreamServer
	m      *chat.Chat
}
func (s *ChatChatEnquireStreamStream) Context() context.Context {
	return s.stream.Context()
}
func (s *ChatChatEnquireStreamStream) Send(_ *gs.Null) error {
	res := mrz.NewTypedRes[*pb_chat_v1.Chat, *anypb.Any]()
	// data
	res.Data = new(pb_chat_v1.Chat)
	jd, err := sjson.Marshal(s.m)
	if err != nil {
		return err
	}
	err = sjson.Unmarshal(jd, res.Data)
	if err != nil {
		return err
	}
	// resp
	null := structpb.NewNullValue()
	resp, _ := anypb.New(null)
	res.Resp = resp
	return s.stream.Send(res.ToAny())
}
func (s *ChatChatEnquireStreamStream) Recv() (*gs.Null, error) {
	in, err := s.stream.Recv()
	if err != nil {
		return nil, err
	}
	req := mrz.ToTypedModel[*pb_chat_v1.Chat, *anypb.Any](in)
	jd, err := sjson.Marshal(req.Data)
	if err != nil {
		return nil, err
	}
	err = sjson.Unmarshal(jd, s.m)
	return nil, err
}

func (s *chatGsrv) ChatEnquireStream(stream pb_chat_v1.ChatGsrv_ChatEnquireStreamServer) error {
	gsStream := &ChatChatEnquireStreamStream{stream, &chat.Chat{} }
	return gsStream.m.EnquireStream(gsStream)
}

