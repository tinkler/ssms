// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: chat/v1/chat.proto

package chat_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatGsrvClient is the client API for ChatGsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGsrvClient interface {
	ChatEnquire(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	ChatEnquireStream(ctx context.Context, opts ...grpc.CallOption) (ChatGsrv_ChatEnquireStreamClient, error)
}

type chatGsrvClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGsrvClient(cc grpc.ClientConnInterface) ChatGsrvClient {
	return &chatGsrvClient{cc}
}

func (c *chatGsrvClient) ChatEnquire(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/chat.v1.ChatGsrv/ChatEnquire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGsrvClient) ChatEnquireStream(ctx context.Context, opts ...grpc.CallOption) (ChatGsrv_ChatEnquireStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatGsrv_ServiceDesc.Streams[0], "/chat.v1.ChatGsrv/ChatEnquireStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatGsrvChatEnquireStreamClient{stream}
	return x, nil
}

type ChatGsrv_ChatEnquireStreamClient interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ClientStream
}

type chatGsrvChatEnquireStreamClient struct {
	grpc.ClientStream
}

func (x *chatGsrvChatEnquireStreamClient) Send(m *anypb.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatGsrvChatEnquireStreamClient) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatGsrvServer is the server API for ChatGsrv service.
// All implementations must embed UnimplementedChatGsrvServer
// for forward compatibility
type ChatGsrvServer interface {
	ChatEnquire(context.Context, *anypb.Any) (*anypb.Any, error)
	ChatEnquireStream(ChatGsrv_ChatEnquireStreamServer) error
	mustEmbedUnimplementedChatGsrvServer()
}

// UnimplementedChatGsrvServer must be embedded to have forward compatible implementations.
type UnimplementedChatGsrvServer struct {
}

func (UnimplementedChatGsrvServer) ChatEnquire(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEnquire not implemented")
}
func (UnimplementedChatGsrvServer) ChatEnquireStream(ChatGsrv_ChatEnquireStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatEnquireStream not implemented")
}
func (UnimplementedChatGsrvServer) mustEmbedUnimplementedChatGsrvServer() {}

// UnsafeChatGsrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGsrvServer will
// result in compilation errors.
type UnsafeChatGsrvServer interface {
	mustEmbedUnimplementedChatGsrvServer()
}

func RegisterChatGsrvServer(s grpc.ServiceRegistrar, srv ChatGsrvServer) {
	s.RegisterService(&ChatGsrv_ServiceDesc, srv)
}

func _ChatGsrv_ChatEnquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGsrvServer).ChatEnquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.v1.ChatGsrv/ChatEnquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGsrvServer).ChatEnquire(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGsrv_ChatEnquireStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatGsrvServer).ChatEnquireStream(&chatGsrvChatEnquireStreamServer{stream})
}

type ChatGsrv_ChatEnquireStreamServer interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ServerStream
}

type chatGsrvChatEnquireStreamServer struct {
	grpc.ServerStream
}

func (x *chatGsrvChatEnquireStreamServer) Send(m *anypb.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatGsrvChatEnquireStreamServer) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatGsrv_ServiceDesc is the grpc.ServiceDesc for ChatGsrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGsrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.v1.ChatGsrv",
	HandlerType: (*ChatGsrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChatEnquire",
			Handler:    _ChatGsrv_ChatEnquire_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatEnquireStream",
			Handler:       _ChatGsrv_ChatEnquireStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat/v1/chat.proto",
}
