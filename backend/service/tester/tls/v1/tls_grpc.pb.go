// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: tls/v1/tls.proto

package tls_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TlsGsrvClient is the client API for TlsGsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TlsGsrvClient interface {
	ChatInRoom(ctx context.Context, opts ...grpc.CallOption) (TlsGsrv_ChatInRoomClient, error)
}

type tlsGsrvClient struct {
	cc grpc.ClientConnInterface
}

func NewTlsGsrvClient(cc grpc.ClientConnInterface) TlsGsrvClient {
	return &tlsGsrvClient{cc}
}

func (c *tlsGsrvClient) ChatInRoom(ctx context.Context, opts ...grpc.CallOption) (TlsGsrv_ChatInRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &TlsGsrv_ServiceDesc.Streams[0], "/tls.v1.TlsGsrv/ChatInRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &tlsGsrvChatInRoomClient{stream}
	return x, nil
}

type TlsGsrv_ChatInRoomClient interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ClientStream
}

type tlsGsrvChatInRoomClient struct {
	grpc.ClientStream
}

func (x *tlsGsrvChatInRoomClient) Send(m *anypb.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tlsGsrvChatInRoomClient) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TlsGsrvServer is the server API for TlsGsrv service.
// All implementations must embed UnimplementedTlsGsrvServer
// for forward compatibility
type TlsGsrvServer interface {
	ChatInRoom(TlsGsrv_ChatInRoomServer) error
	mustEmbedUnimplementedTlsGsrvServer()
}

// UnimplementedTlsGsrvServer must be embedded to have forward compatible implementations.
type UnimplementedTlsGsrvServer struct {
}

func (UnimplementedTlsGsrvServer) ChatInRoom(TlsGsrv_ChatInRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatInRoom not implemented")
}
func (UnimplementedTlsGsrvServer) mustEmbedUnimplementedTlsGsrvServer() {}

// UnsafeTlsGsrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TlsGsrvServer will
// result in compilation errors.
type UnsafeTlsGsrvServer interface {
	mustEmbedUnimplementedTlsGsrvServer()
}

func RegisterTlsGsrvServer(s grpc.ServiceRegistrar, srv TlsGsrvServer) {
	s.RegisterService(&TlsGsrv_ServiceDesc, srv)
}

func _TlsGsrv_ChatInRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TlsGsrvServer).ChatInRoom(&tlsGsrvChatInRoomServer{stream})
}

type TlsGsrv_ChatInRoomServer interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ServerStream
}

type tlsGsrvChatInRoomServer struct {
	grpc.ServerStream
}

func (x *tlsGsrvChatInRoomServer) Send(m *anypb.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tlsGsrvChatInRoomServer) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TlsGsrv_ServiceDesc is the grpc.ServiceDesc for TlsGsrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TlsGsrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tls.v1.TlsGsrv",
	HandlerType: (*TlsGsrvServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatInRoom",
			Handler:       _TlsGsrv_ChatInRoom_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tls/v1/tls.proto",
}
