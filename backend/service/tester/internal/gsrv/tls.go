// Code generated by github.com/tinkler/mqttadmin; DO NOT EDIT.
package gsrv
import (
	"context"
	mrz "github.com/tinkler/mqttadmin/mrz/v1"
	"github.com/tinkler/ssms/backend/service/tester/internal/model/tls"
	pb_tls_v1 "github.com/tinkler/ssms/backend/service/tester/tls/v1"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	"github.com/tinkler/mqttadmin/pkg/gs"
	"github.com/tinkler/mqttadmin/pkg/jsonz/sjson"
)


type tlsGsrv struct {
	pb_tls_v1.UnimplementedTlsGsrvServer
}

func NewTlsGsrv() *tlsGsrv {
	return &tlsGsrv{}
}

type TlsChatInRoomStream struct {
	stream pb_tls_v1.TlsGsrv_ChatInRoomServer
	m      *tls.Chat
}
func (s *TlsChatInRoomStream) Context() context.Context {
	return s.stream.Context()
}
func (s *TlsChatInRoomStream) Send(_ *gs.Null) error {
	res := mrz.NewTypedRes[*pb_tls_v1.Chat, *anypb.Any]()
	// data
	res.Data = new(pb_tls_v1.Chat)
	jd, err := sjson.Marshal(s.m)
	if err != nil {
		return err
	}
	err = sjson.Unmarshal(jd, res.Data)
	if err != nil {
		return err
	}
	// resp
	null := structpb.NewNullValue()
	resp, _ := anypb.New(null)
	res.Resp = resp
	return s.stream.Send(res.ToAny())
}
func (s *TlsChatInRoomStream) Recv() (*gs.Null, error) {
	in, err := s.stream.Recv()
	if err != nil {
		return nil, err
	}
	req := mrz.ToTypedModel[*pb_tls_v1.Chat, *anypb.Any](in)
	jd, err := sjson.Marshal(req.Data)
	if err != nil {
		return nil, err
	}
	err = sjson.Unmarshal(jd, s.m)
	return nil, err
}

func (s *tlsGsrv) ChatInRoom(stream pb_tls_v1.TlsGsrv_ChatInRoomServer) error {
	gsStream := &TlsChatInRoomStream{stream, &tls.Chat{} }
	return gsStream.m.InRoom(gsStream)
}

